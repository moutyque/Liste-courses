plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id "org.sonarqube"

}

//apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "small.app.shopping.list"
            minSdkVersion 26
            targetSdkVersion 30
            versionCode 11
            versionName "1.3.1"

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildFeatures {
        dataBinding = true
// for view binding:
        viewBinding = true
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def loadVersionFile() {
    def versionPropsFile = file('version.properties')
    Properties versionProps
    if (versionPropsFile.canRead()) {

        versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

    } else {
        throw new GradleException("Could not read version.properties!")
    }
    return versionProps
}

def getCode(Properties versionProps) {
    return versionProps['build.version'].toInteger()
}

def getName(Properties versionProps) {
    return versionProps['product.version']
}


{ project ->
    project.tasks.assembleRelease << {
        def versionPropsFile = file('version.properties')
        def code
        Properties versionProps
        if (versionPropsFile.canRead()) {
            versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            code = versionProps['build.version'].toInteger() + 1
        } else {
            throw new GradleException("Could not read version.properties!")
        }

        versionProps['build.version'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        project.android.defaultConfig.versionCode code
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'

    androidTestImplementation 'androidx.test:runner:1.4.0'

    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    //Lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'
    androidTestImplementation 'androidx.test:rules:1.4.1-alpha03'

    //Room
    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    //Coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'

    //Needed for espresso
    androidTestImplementation 'androidx.fragment:fragment-testing:1.3.6'

}